{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nvar validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i); // const validEmailRegex = RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nvar validPhoneRegex = RegExp(/^[0-9 ]{11,}$/i);\nvar contactFormValidationSchema = Yup.object({\n  Name: Yup.string().min(5).required('Please provide your Full Name.'),\n  Company: Yup.string().min(2),\n  Email: Yup.string().email().matches(validEmailRegex, 'Please enter a valid E-mail Address').required('Please provide your E-mail Address.'),\n  Phone: Yup.string().matches(validPhoneRegex, 'Please enter a valid Phone Number'),\n  Message: Yup.string().required('Please fill in a Message.')\n});\n\nvar getSubmitCallback = function getSubmitCallback() {\n  return function (values) {\n    axios({\n      method: 'POST',\n      url: 'http://legalservebedford.co.uk/contact-process.php?action=processContact',\n      data: JSON.stringify(values)\n    }).then(function (response) {\n      console.log(response.data);\n\n      if (response.data.status === '\\\"Success\\\"') {\n        alert(\"Message Sent.\");\n      } else {\n        console.log(response);\n        alert(\"Message failed to send.\");\n      }\n    });\n  };\n};\n\nvar MainContactForm = function MainContactForm() {\n  var FormikError = function FormikError(error) {\n    return __jsx(\"p\", {\n      className: \"help is-danger\"\n    }, error.children);\n  };\n\n  var contactFormInitialValues = {\n    Name: '',\n    Company: '',\n    Email: '',\n    Phone: '',\n    Message: ''\n  };\n  var onSubmit = React.useCallback(getSubmitCallback(), []);\n  return __jsx(Formik, {\n    initialValues: contactFormInitialValues,\n    validationSchema: contactFormValidationSchema,\n    onSubmit: onSubmit\n  }, function (_ref) {\n    var handleSubmit = _ref.handleSubmit,\n        values = _ref.values,\n        errors = _ref.errors,\n        touched = _ref.touched;\n    return __jsx(Form, {\n      id: \"contact-form\",\n      onSubmit: handleSubmit,\n      method: \"GET\"\n    }, __jsx(\"div\", {\n      className: \"field\"\n    }, __jsx(\"div\", {\n      className: \"control has-icons-left has-icons-right\"\n    }, __jsx(Field, {\n      type: \"text\",\n      className: \"input \".concat(touched.Name && errors.Name ? 'is-danger' : '', \" \").concat(touched.Name && !errors.Name ? 'is-success' : ''),\n      placeholder: \"Your Name\",\n      name: \"Name\"\n    }), __jsx(\"span\", {\n      className: \"icon is-small is-left\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: \"user\"\n    }))), __jsx(ErrorMessage, {\n      component: FormikError,\n      name: \"Name\"\n    })), __jsx(\"div\", {\n      className: \"field\"\n    }, __jsx(\"div\", {\n      className: \"control has-icons-left has-icons-right\"\n    }, __jsx(Field, {\n      type: \"text\",\n      className: \"input \".concat(touched.Company && errors.Company ? 'is-danger' : '', \" \").concat(touched.Company && !errors.Company ? 'is-success' : ''),\n      placeholder: \"Company / Organisation\",\n      name: \"Company\"\n    }), __jsx(\"span\", {\n      className: \"icon is-small is-left\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: \"at\"\n    }))), __jsx(ErrorMessage, {\n      component: FormikError,\n      name: \"Company\"\n    })), __jsx(\"div\", {\n      className: \"field\"\n    }, __jsx(\"div\", {\n      className: \"control has-icons-left has-icons-right\"\n    }, __jsx(Field, {\n      type: \"email\",\n      className: \"input \".concat(touched.Email && errors.Email ? 'is-danger' : '', \" \").concat(touched.Email && !errors.Email ? 'is-success' : ''),\n      placeholder: \"E-mail Address\",\n      \"aria-describedby\": \"emailHelp\",\n      name: \"Email\"\n    }), __jsx(\"span\", {\n      className: \"icon is-small is-left\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: \"at\"\n    }))), __jsx(ErrorMessage, {\n      component: FormikError,\n      name: \"Email\"\n    })), __jsx(\"div\", {\n      className: \"field\"\n    }, __jsx(\"div\", {\n      className: \"control has-icons-left has-icons-right\"\n    }, __jsx(Field, {\n      type: \"Phone\",\n      className: \"input \".concat(touched.Phone && errors.Phone ? 'is-danger' : '', \" \").concat(touched.Phone && !errors.Phone ? 'is-success' : ''),\n      placeholder: \"Phone Number\",\n      \"aria-describedby\": \"phoneHelp\",\n      name: \"Phone\"\n    }), __jsx(\"span\", {\n      className: \"icon is-small is-left\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: \"phone\"\n    }))), __jsx(ErrorMessage, {\n      component: FormikError,\n      name: \"Phone\"\n    })), __jsx(\"div\", {\n      className: \"field\"\n    }, __jsx(\"div\", {\n      className: \"control has-icons-left has-icons-right\"\n    }, __jsx(Field, {\n      component: \"textarea\",\n      className: \"textarea \".concat(touched.Message && errors.Message ? 'is-danger' : '', \" \").concat(touched.Message && !errors.Message ? 'is-success' : ''),\n      placeholder: \"Your Message\",\n      name: \"Message\"\n    })), __jsx(ErrorMessage, {\n      component: FormikError,\n      name: \"Message\"\n    })), __jsx(\"div\", {\n      className: \"field buttons is-right\"\n    }, __jsx(\"div\", {\n      className: \"control\"\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      className: \"button is-primary\"\n    }, \"Submit\"))));\n  });\n};\n\nexport default MainContactForm;","map":null,"metadata":{},"sourceType":"module"}